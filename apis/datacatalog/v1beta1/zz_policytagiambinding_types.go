// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ConditionObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`
}

type PolicyTagIAMBindingInitParameters struct {
	Condition *ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	PolicyTag *string `json:"policyTag,omitempty" tf:"policy_tag,omitempty"`
}

type PolicyTagIAMBindingObservation struct {
	Condition *ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	PolicyTag *string `json:"policyTag,omitempty" tf:"policy_tag,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type PolicyTagIAMBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition *ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyTag *string `json:"policyTag,omitempty" tf:"policy_tag,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// PolicyTagIAMBindingSpec defines the desired state of PolicyTagIAMBinding
type PolicyTagIAMBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyTagIAMBindingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyTagIAMBindingInitParameters `json:"initProvider,omitempty"`
}

// PolicyTagIAMBindingStatus defines the observed state of PolicyTagIAMBinding.
type PolicyTagIAMBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyTagIAMBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyTagIAMBinding is the Schema for the PolicyTagIAMBindings API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type PolicyTagIAMBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.members) || (has(self.initProvider) && has(self.initProvider.members))",message="spec.forProvider.members is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyTag) || (has(self.initProvider) && has(self.initProvider.policyTag))",message="spec.forProvider.policyTag is a required parameter"
	Spec   PolicyTagIAMBindingSpec   `json:"spec"`
	Status PolicyTagIAMBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyTagIAMBindingList contains a list of PolicyTagIAMBindings
type PolicyTagIAMBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyTagIAMBinding `json:"items"`
}

// Repository type metadata.
var (
	PolicyTagIAMBinding_Kind             = "PolicyTagIAMBinding"
	PolicyTagIAMBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyTagIAMBinding_Kind}.String()
	PolicyTagIAMBinding_KindAPIVersion   = PolicyTagIAMBinding_Kind + "." + CRDGroupVersion.String()
	PolicyTagIAMBinding_GroupVersionKind = CRDGroupVersion.WithKind(PolicyTagIAMBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyTagIAMBinding{}, &PolicyTagIAMBindingList{})
}
